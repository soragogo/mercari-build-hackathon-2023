// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	domain "github.com/soragogo/mecari-build-hackathon-2023/backend/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserRepository) AddUser(ctx context.Context, user domain.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserRepositoryMockRecorder) AddUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserRepository)(nil).AddUser), ctx, user)
}

// GetUser mocks base method.
func (m *MockUserRepository) GetUser(ctx context.Context, id int64) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepositoryMockRecorder) GetUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepository)(nil).GetUser), ctx, id)
}

// UpdateBalance mocks base method.
func (m *MockUserRepository) UpdateBalance(ctx context.Context, id, balance int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", ctx, id, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockUserRepositoryMockRecorder) UpdateBalance(ctx, id, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockUserRepository)(nil).UpdateBalance), ctx, id, balance)
}

// MockItemRepository is a mock of ItemRepository interface.
type MockItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockItemRepositoryMockRecorder
}

// MockItemRepositoryMockRecorder is the mock recorder for MockItemRepository.
type MockItemRepositoryMockRecorder struct {
	mock *MockItemRepository
}

// NewMockItemRepository creates a new mock instance.
func NewMockItemRepository(ctrl *gomock.Controller) *MockItemRepository {
	mock := &MockItemRepository{ctrl: ctrl}
	mock.recorder = &MockItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemRepository) EXPECT() *MockItemRepositoryMockRecorder {
	return m.recorder
}

// AddItem mocks base method.
func (m *MockItemRepository) AddItem(ctx context.Context, item domain.Item) (domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItem", ctx, item)
	ret0, _ := ret[0].(domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddItem indicates an expected call of AddItem.
func (mr *MockItemRepositoryMockRecorder) AddItem(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockItemRepository)(nil).AddItem), ctx, item)
}

// GetCategories mocks base method.
func (m *MockItemRepository) GetCategories(ctx context.Context) ([]domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", ctx)
	ret0, _ := ret[0].([]domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories.
func (mr *MockItemRepositoryMockRecorder) GetCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockItemRepository)(nil).GetCategories), ctx)
}

// GetCategory mocks base method.
func (m *MockItemRepository) GetCategory(ctx context.Context, id int64) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", ctx, id)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockItemRepositoryMockRecorder) GetCategory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockItemRepository)(nil).GetCategory), ctx, id)
}

// GetItem mocks base method.
func (m *MockItemRepository) GetItem(ctx context.Context, id int64) (domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, id)
	ret0, _ := ret[0].(domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockItemRepositoryMockRecorder) GetItem(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockItemRepository)(nil).GetItem), ctx, id)
}

// GetItemImage mocks base method.
func (m *MockItemRepository) GetItemImage(ctx context.Context, id int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemImage", ctx, id)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemImage indicates an expected call of GetItemImage.
func (mr *MockItemRepositoryMockRecorder) GetItemImage(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemImage", reflect.TypeOf((*MockItemRepository)(nil).GetItemImage), ctx, id)
}

// GetItemsByUserID mocks base method.
func (m *MockItemRepository) GetItemsByUserID(ctx context.Context, userID int64) ([]domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsByUserID", ctx, userID)
	ret0, _ := ret[0].([]domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsByUserID indicates an expected call of GetItemsByUserID.
func (mr *MockItemRepositoryMockRecorder) GetItemsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsByUserID", reflect.TypeOf((*MockItemRepository)(nil).GetItemsByUserID), ctx, userID)
}

// GetOnSaleItems mocks base method.
func (m *MockItemRepository) GetOnSaleItems(ctx context.Context) ([]domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnSaleItems", ctx)
	ret0, _ := ret[0].([]domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnSaleItems indicates an expected call of GetOnSaleItems.
func (mr *MockItemRepositoryMockRecorder) GetOnSaleItems(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnSaleItems", reflect.TypeOf((*MockItemRepository)(nil).GetOnSaleItems), ctx)
}

// SearchItemsByWord mocks base method.
func (m *MockItemRepository) SearchItemsByWord(ctx context.Context, word string) ([]domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchItemsByWord", ctx, word)
	ret0, _ := ret[0].([]domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchItemsByWord indicates an expected call of SearchItemsByWord.
func (mr *MockItemRepositoryMockRecorder) SearchItemsByWord(ctx, word interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchItemsByWord", reflect.TypeOf((*MockItemRepository)(nil).SearchItemsByWord), ctx, word)
}

// UpdateItemStatus mocks base method.
func (m *MockItemRepository) UpdateItemStatus(ctx context.Context, id int64, status domain.ItemStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItemStatus indicates an expected call of UpdateItemStatus.
func (mr *MockItemRepositoryMockRecorder) UpdateItemStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemStatus", reflect.TypeOf((*MockItemRepository)(nil).UpdateItemStatus), ctx, id, status)
}
